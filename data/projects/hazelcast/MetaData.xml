<?xml version="1.0" encoding="UTF-8"?>
<response>
  <status>success</status>
  <result>
    <project>
      <id>112577</id>
      <name>hazelcast</name>
      <url>http://www.ohloh.net/p/hazelcast.xml</url>
      <html_url>http://www.ohloh.net/p/hazelcast</html_url>
      <created_at>2008-12-27T23:45:04Z</created_at>
      <updated_at>2013-07-02T14:46:39Z</updated_at>
      <description>Hazelcast is a clustering and highly scalable data distribution platform for Java. 

Features: 

Distributed implementations of java.util.{Queue, Set, List, Map} Distributed implementation of  java.util.concurrency.locks.Lock Distributed implementation of java.util.concurrent.ExecutorService Distributed MultiMap for one-to-many relationships Distributed Topic for publish/subscribe messaging Transaction support and J2EE container integration via JCA Socket level encryption support for secure clusters Synchronous (write-through) and asynchronous (write-behind) persistence Second level cache provider for Hibernate Monitoring and management of the cluster via JMX Dynamic HTTP session clustering Support for cluster info and membership events Dynamic discovery Dynamic scaling Dynamic partitioning with backups Dynamic fail-over  

Hazelcast is for you if you want to 

share data/state among many servers (e.g. web session sharing) cache your data (distributed cache) for better performance cluster your application provide secure communication among servers partition your in-memory data send/receive messages among applications distribute workload onto many servers take advantage of parallel processing provide fail-safe data management 

Hazelcast is pure Java. JVMs that are running Hazelcast will dynamically cluster. Although by default Hazelcast will use multicast for discovery, it can also be configured to only use TCP/IP for enviroments where multicast is not available or preferred. Communication among cluster members is always TCP/IP with Java NIO beauty. Default configuration comes with 1 backup so if one node fails, no data will be lost. It is as simple as using java.util.{Queue, Set, List, Map}. Just add the hazelcast.jar into your classpath and start coding.  

A test application comes with the Hazelcast distribution that simulates the queue, set, map and lock APIs. You may want to watch the following 12 minute screencast to quickly get started.</description>
      <homepage_url>http://code.google.com/p/hazelcast</homepage_url>
      <download_url>http://code.google.com/p/hazelcast/wiki/Downloads?tm=2</download_url>
      <url_name>hazelcast</url_name>
      <medium_logo_url>http://cloud.ohloh.net/attachments/20008/hazelcast-small-plain-logo_med.jpg</medium_logo_url>
      <small_logo_url>http://cloud.ohloh.net/attachments/20008/hazelcast-small-plain-logo_small.jpg</small_logo_url>
      <user_count>11</user_count>
      <average_rating>5.0</average_rating>
      <rating_count>2</rating_count>
      <review_count>0</review_count>
      <analysis_id>14503755</analysis_id>
      <tags>
        <tag>in-memory</tag>
        <tag>distributed</tag>
        <tag>dht</tag>
        <tag>cluster</tag>
        <tag>datagrid</tag>
        <tag>grid</tag>
      </tags>
      <analysis>
        <id>14503755</id>
        <url>http://www.ohloh.net/analyses/14503755.xml</url>
        <project_id>112577</project_id>
        <updated_at>2013-07-02T14:46:38Z</updated_at>
        <logged_at>2013-07-02T14:45:12Z</logged_at>
        <min_month>2008-12-01T00:00:00Z</min_month>
        <max_month>2013-07-01T00:00:00Z</max_month>
        <twelve_month_contributor_count>26</twelve_month_contributor_count>
        <total_code_lines>219510</total_code_lines>
        <factoids>
          <factoid type="FactoidTeamSizeLarge">
Large, active development team          </factoid>
          <factoid type="FactoidAgeOld">
Well-established codebase          </factoid>
          <factoid type="FactoidCommentsLow">
Few source code comments          </factoid>
          <factoid type="FactoidActivityDecreasing">
Decreasing Y-O-Y development activity          </factoid>
        </factoids>
        <languages graph_url="http://www.ohloh.net/p/hazelcast/analyses/14503755/languages.png">
          <language color="9A63AD" percentage="84" id="5">
Java          </language>
          <language color="555555" percentage="10" id="3">
XML          </language>
          <language color="556677" percentage="5" id="35">
XML Schema          </language>
          <language color="000000" percentage="1" id="">
7 Other          </language>
        </languages>
        <main_language_id>5</main_language_id>
        <main_language_name>Java</main_language_name>
      </analysis>
      <licenses>
        <license>
          <name>apache_2</name>
          <nice_name>Apache License 2.0</nice_name>
        </license>
      </licenses>
    </project>
  </result>
</response>
